<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ync.project.admin.mapper.MemberMapper">

	<sql id="criteria">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<foreach item='type' collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'W'.toString()">
							writer like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>

	<resultMap type="com.ync.project.domain.MemberVO" id="memberMap">
		<id property="userid" column="userid"/>
		<result property="userid" column="userid"/>
		<result property="userpw" column="userpw"/>
		<result property="userName" column="username"/>
		<result property="regDate" column="regdate"/>
		<result property="updateDate" column="updatedate"/>
		<collection property="authList" resultMap="authMap">
		</collection> 
	</resultMap>
	
	<resultMap type="com.ync.project.domain.AuthVO" id="authMap">
		<result property="userid" column="userid"/>
		<result property="auth" column="auth"/>
	</resultMap>

	<!--
	member_auth table은 사용 하지 않고 AuthVO만 사용한다.
	tbl_member 의 autho 컬럼 정보만 따로 담아는 객차이다.
	Spring Security의 기본 사용법과 다르게 tbl_member에 권한 컴럼(auth)을
	넣어서 사용하기에 기본 사용법과 달라진다.
	-->
	<select id="read" resultMap="memberMap">
		SELECT	userid,
				userpw,
				username,
				enabled,
				regdate,
				updatedate,
				auth
		FROM	tbl_member
		WHERE	userid = #{userid} 
	</select>
	
	
	<select id="getList"
		resultType="com.ync.project.domain.MemberListVO">
	<![CDATA[
			SELECT  m.userid,
        			name,
    	    		userpw,
        			birth,
        			phone,
        			creater_name,
        			bank_account,
        			levels,
        			status,
        			sns,
        			other_address,
        			donations
			FROM    teamamember m,
		        	(SELECT userid,
                			sum(donation) AS donations
        			FROM    teamadonation d
        			GROUP BY d.userid
        			)d
			WHERE   m.userid = d.userid;
		]]>
	</select>


	


	<insert id="insert">
		<![CDATA[
			INSERT	INTO	teamamember(
								userid,
								name,
								birth,
								phone,
								userpw,
								creater_name,
								bank_account,
								donation_accept,
								levels,
								status,
								sns,
								other_address
							)
							VALUES(
								#{userid},
								#{name},
								#{birth},
								#{phone},
								#{userpw},
								#{creater_name},
								#{bank_account},
								#{donation_accept},
								1,
								#{status},
								#{sns},
								#{other_address}
							)
		]]>
	</insert>

	<update id="update">
		<![CDATA[
			UPDATE	teamamember
			SET		phone = #{phone},
					userpw = #{userpw},
					bank_account = #{bank_account},
					sns = #{sns},
					other_address = #{other_address}
			WHERE	userid = #{userid}
		]]>
	</update>
</mapper>
